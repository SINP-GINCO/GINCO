<?php

namespace Ign\Bundle\GincoBundle\Repository\RawData;
use Ign\Bundle\GincoBundle\Entity\RawData\DEE;
use Ign\Bundle\OGAMBundle\Entity\RawData\Jdd;

/**
 * DEERepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DEERepository extends \Doctrine\ORM\EntityRepository
{
	/**
	 * Find all versions of DEE for a given Jdd
	 *
	 * @param Jdd $jdd
	 * @return array
	 */
	public function findByJdd(Jdd $jdd)
	{
		$qb = $this->createQueryBuilder('d')
			->join('d.jdd', 'j')
			->where('j.id = :jddId')
			->setParameter('jddId', $jdd->getId())
			->orderBy('d.version', 'DESC');

		$query = $qb->getQuery();

		return $query->getResult();
	}

	/**
	 * Find current version of DEE (if there is one)
	 *
	 * @param Jdd $jdd
	 * @return array
	 */
	public function findCurrentByJdd(Jdd $jdd)
	{
		// The ORDER BY version + setMaxResults 1 should not be necessary
		// if the application guarantees only one CURRENT DEE per Jdd

		$qb = $this->createQueryBuilder('d')
			->where('d.status = :current')
			->setParameter('current', DEE::STATUS_CURRENT)
			->join('d.jdd', 'j')
			->andWhere('j.id = :jddId')
			->setParameter('jddId', $jdd->getId())
			->orderBy('d.version', 'DESC')
			->setMaxResults( 1 )
		;

		$query = $qb->getQuery();

		return $query->getResult();
	}
}
